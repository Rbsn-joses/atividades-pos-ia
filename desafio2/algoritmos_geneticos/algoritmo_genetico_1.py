# -*- coding: utf-8 -*-
"""algoritmo-genetico-1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tk_cesIK6AI8spX-fpbDOxQm0B9p_Tdo
"""

!pip  install pyomo
!python setup.py dependencies --extra optional
!apt-get install -y -qq glpk-utils

# Importa as classes e funções necessárias do Pyomo
from pyomo.environ import *

# ==============================================================================
# Dados do Problema da Mochila
# ==============================================================================

# Dicionários que mapeiam os itens para seus respectivos valores (v) e pesos (w)
v = {'hammer': 8, 'wrench': 3, 'screwdriver': 6, 'towel': 11}
w = {'hammer': 5, 'wrench': 7, 'screwdriver': 4, 'towel': 3}

# O limite de peso da mochila
limit = 14

# Lista dos itens, ordenada para consistência
items = list(sorted(v.keys()))

# ==============================================================================
# Construção do Modelo de Otimização
# ==============================================================================

# Cria uma instância de um modelo concreto do Pyomo
model = ConcreteModel()

# ==============================================================================
# Declaração das Variáveis de Decisão
# ==============================================================================

# x[i] representa uma variável binária para cada item,
# onde x[i] = 1 se o item 'i' for incluído na mochila, e 0 caso contrário.
# A propriedade 'Binary' restringe o domínio da variável a 0 ou 1.
model.x = Var(items, within=Binary)

# ==============================================================================
# Declaração do Objetivo
# ==============================================================================

# A função objetivo é a maximização do valor total dos itens selecionados.
# 'expr' define a expressão matemática do objetivo.
# 'sense=maximize' especifica que o objetivo é maximizar essa expressão.
model.objective = Objective(
    expr=sum(v[i] * model.x[i] for i in items),
    sense=maximize
)

# ==============================================================================
# Declaração das Restrições
# ==============================================================================

# A restrição é que o peso total dos itens selecionados não pode exceder o limite.
# 'expr' define a expressão matemática da restrição.
model.constraint = Constraint(
    expr=sum(w[i] * model.x[i] for i in items) <= limit
)

# ==============================================================================
# Resolução do Modelo
# ==============================================================================

# Cria uma instância do SolverFactory para o solucionador 'glpk'.
# 'glpk' é um solucionador de programação linear de código aberto.
solver = SolverFactory('glpk')

# Resolve o modelo usando o solucionador.
results = solver.solve(model, tee=True)

# ==============================================================================
# Análise dos Resultados
# ==============================================================================

# Imprime o status da otimização para verificar se a solução foi encontrada.
print("Status do solucionador: %s" % results.solver.termination_condition)

# Imprime o valor das variáveis de decisão (itens selecionados) no ponto ótimo.
print("\nItens selecionados:")
for i in items:
    print("%s = %s" % (i, model.x[i].value))

# Imprime o valor da função objetivo (valor máximo obtido).
print("\nValor máximo obtido = %s" % model.objective.value)